<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>TRMOD</title>
    <url>/2020/02/10/TRMOD/</url>
    <content><![CDATA[<h2 id="MOD内容分类"><a href="#MOD内容分类" class="headerlink" title="MOD内容分类"></a>MOD内容分类</h2><p><a href="http://tmodloader.github.io/tModLoader/html/annotated.html" target="_blank" rel="noopener">http://tmodloader.github.io/tModLoader/html/annotated.html</a></p>
<p><a href="https://github.com/tModLoader/tModLoader/wiki/Useful-Resources" target="_blank" rel="noopener">https://github.com/tModLoader/tModLoader/wiki/Useful-Resources</a><br>重要网站</p>
<p>Item : 道具</p>
<p><a href="https://forums.terraria.org/index.php?threads/terraria-tile-generator.70088/" target="_blank" rel="noopener">https://forums.terraria.org/index.php?threads/terraria-tile-generator.70088/</a><br>自动tile贴图</p>
<h2 id="Armor知识"><a href="#Armor知识" class="headerlink" title="Armor知识"></a>Armor知识</h2><ol>
<li>装备defense可以调成负数，实际有效，不过不会显示装备防御力,同时，人物防御力最低为0,最高为600</li>
<li>LifeRegen不能在UpdateEquip里，不是static; UpdateArmorSet和UpdateEquip是一类数据用lifeRegen</li>
<li>//<a href="https://github.com/tModLoader/tModLoader/wiki/Useful-Vanilla-Fields" target="_blank" rel="noopener">https://github.com/tModLoader/tModLoader/wiki/Useful-Vanilla-Fields</a>             装备属性加成列表</li>
<li>//<a href="https://github.com/tModLoader/tModLoader/wiki/Vanilla-Buff-IDs" target="_blank" rel="noopener">https://github.com/tModLoader/tModLoader/wiki/Vanilla-Buff-IDs</a>                    装备可以添加一些buff</li>
<li><a href="https://forums.terraria.org/index.php?threads/armorhelper-sprite-armor-sets-30x-times-faster.68744/" target="_blank" rel="noopener">https://forums.terraria.org/index.php?threads/armorhelper-sprite-armor-sets-30x-times-faster.68744/</a>        自动画装备贴图</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>“python-eggies”</title>
    <url>/2019/12/06/%E2%80%9Cpython-eggies%E2%80%9D/</url>
    <content><![CDATA[<h1 id="python-eggies"><a href="#python-eggies" class="headerlink" title="python eggies"></a>python eggies</h1><h2 id="overload-in-python"><a href="#overload-in-python" class="headerlink" title="overload in python"></a>overload in python</h2><p>Actually, there is no function overload in python,but we can do it in a different way</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">roll_dice</span><span class="params">(n=<span class="number">2</span>)</span>:</span></span><br><span class="line">    total=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(n):	 <span class="comment">#change range() to unary</span></span><br><span class="line">        total+=randint(<span class="number">1</span>,<span class="number">6</span>) <span class="comment">#use _ as default</span></span><br><span class="line">    <span class="keyword">return</span> total		<span class="comment">#loop n times</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(a=<span class="number">0</span>,b=<span class="number">0</span>,c=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a+b+c</span><br><span class="line"></span><br><span class="line">print(roll_dice())    <span class="comment">#default</span></span><br><span class="line">print(roll_dice(<span class="number">3</span>))</span><br><span class="line">print(add())</span><br><span class="line">print(add(<span class="number">1</span>))			<span class="comment">#a</span></span><br><span class="line">print(add(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line">print(add(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))	<span class="comment">#a b c</span></span><br><span class="line">print(add(c=<span class="number">50</span>,a=<span class="number">100</span>,b=<span class="number">200</span>))	<span class="comment">#change the order</span></span><br></pre></td></tr></table></figure>

<h2 id="use-module"><a href="#use-module" class="headerlink" title="use module "></a>use module </h2><p>For there is no function overload，it is necessary to use the module to extinct functions.<br><font color="red">module == .py</font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'hello, world!'</span>)    <span class="comment">#covered</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'goodbye, world!'</span>)</span><br><span class="line">   </span><br><span class="line">foo();</span><br><span class="line">output: goodbye world</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">module1.py</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'hello, world!'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">module2.py</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'goodbye, world!'</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">test.py</span><br><span class="line"><span class="keyword">from</span> module1 <span class="keyword">import</span> foo</span><br><span class="line"><span class="comment"># hello, world!</span></span><br><span class="line">foo()</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> module2 <span class="keyword">import</span> foo</span><br><span class="line"><span class="comment"># goodbye, world!</span></span><br><span class="line">foo()</span><br><span class="line"></span><br><span class="line"><span class="keyword">or</span> test1.py</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> module1 <span class="keyword">as</span> m1</span><br><span class="line"><span class="keyword">import</span> module2 <span class="keyword">as</span> m2</span><br><span class="line"></span><br><span class="line">m1.foo()</span><br><span class="line">m2.foo()</span><br></pre></td></tr></table></figure>
<h2 id="avoid-too-many-mains"><a href="#avoid-too-many-mains" class="headerlink" title="avoid too many mains"></a>avoid too many mains</h2><p>The python interpreter(解释器) would run all the codes in modules.<br>We can only run the function in modules by using ‘ __main__‘</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    print(&apos;call foo()&apos;)</span><br><span class="line">    foo()</span><br></pre></td></tr></table></figure>

<h2 id="function-in-function"><a href="#function-in-function" class="headerlink" title="function in function"></a>function in function</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def foo():</span><br><span class="line">    b = &apos;hello&apos;</span><br><span class="line"></span><br><span class="line">    # we can define function in function </span><br><span class="line">    def bar():</span><br><span class="line">        c = True</span><br><span class="line">        print(a)</span><br><span class="line">        print(b)</span><br><span class="line">        print(c)</span><br><span class="line"></span><br><span class="line">    bar()</span><br><span class="line">    # print(c)  # NameError: name &apos;c&apos; is not defined</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    a = 100</span><br><span class="line">    # print(b)  # NameError: name &apos;b&apos; is not defined</span><br><span class="line">    foo()</span><br></pre></td></tr></table></figure>

<h2 id="2d-array-in-python"><a href="#2d-array-in-python" class="headerlink" title="2d array in python"></a>2d array in python</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">row=4</span><br><span class="line">column=3</span><br><span class="line">g = [[i+j for i in range(column)] for j in range(row)]</span><br><span class="line">print(g)</span><br></pre></td></tr></table></figure>

<p>from:<a href="https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/07.字符串和常用数据结构.md" target="_blank" rel="noopener">https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/07.字符串和常用数据结构.md</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>bugs</tag>
      </tags>
  </entry>
  <entry>
    <title>大一计算机笔试复习</title>
    <url>/2019/11/22/%22set%20and%20dictionary%22%E7%9A%84%E5%89%AF%E6%9C%AC/</url>
    <content><![CDATA[<h1 id="数值、逻辑表达式与运算符"><a href="#数值、逻辑表达式与运算符" class="headerlink" title="数值、逻辑表达式与运算符"></a>数值、逻辑表达式与运算符</h1><h2 id="优先级与结合性"><a href="#优先级与结合性" class="headerlink" title="优先级与结合性"></a>优先级与结合性</h2><ol>
<li><ul>
<li>/ % 优先于 + -</li>
</ul>
</li>
<li><ul>
<li>/ 都是从左到右结合的，就是说先算左边的</li>
</ul>
</li>
</ol>
<h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><ol>
<li>将一种类型的值赋给另一种时，表达式包含不同类型，函数传递参数时会进行类型转换</li>
<li>乘除法只要有一个是浮点，默认结果是浮点</li>
<li>短转长没啥子问题，长变短就会截断</li>
<li>P64蓝字</li>
</ol>
<h2 id="坑坑子"><a href="#坑坑子" class="headerlink" title="坑坑子"></a>坑坑子</h2><ol>
<li>#define是纯粹的宏替换，相当于直接抄过去，很多坑</li>
<li>用浮点数时，注意eps，不能单纯的==；且1.0+3.0不一定等于4.0</li>
</ol>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>pystring</title>
    <url>/2019/11/22/%22pystrings%22/</url>
    <content><![CDATA[<h2 id="1-routine-operation"><a href="#1-routine-operation" class="headerlink" title="1 routine operation"></a>1 routine operation</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">s1 = <span class="string">'hello, world!'</span></span><br><span class="line">s2 = <span class="string">"hello, world!"</span></span><br><span class="line">s3 = <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">hello, </span></span><br><span class="line"><span class="string">world!</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br><span class="line">s4=<span class="string">'\141\142\143\x61\x62\x63\n'</span> <span class="comment">#abcabc</span></span><br><span class="line">s5=<span class="string">'\u925c'</span><span class="comment">#unicode 汉字\u</span></span><br><span class="line"><span class="built_in">print</span>(s1, s2, s3, s4, s5)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'a'</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line">s1= <span class="string">'di'</span> * 3;   <span class="comment">#cover s1 dididi</span></span><br><span class="line"><span class="built_in">print</span>(s1)       <span class="comment">#automatically \n</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'did'</span> <span class="keyword">in</span> s1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#slice</span></span><br><span class="line">str2 = <span class="string">'abc123456'</span></span><br><span class="line"><span class="built_in">print</span>(str2[2]) <span class="comment"># c</span></span><br><span class="line"><span class="comment">#from index to index</span></span><br><span class="line"><span class="built_in">print</span>(str2[2:5]) <span class="comment"># c12</span></span><br><span class="line"><span class="built_in">print</span>(str2[2:]) <span class="comment"># c123456</span></span><br><span class="line"><span class="built_in">print</span>(str2[2::2]) <span class="comment"># c246</span></span><br><span class="line"><span class="built_in">print</span>(str2[::2]) <span class="comment"># ac246</span></span><br><span class="line"><span class="built_in">print</span>(str2[::-1]) <span class="comment"># 654321cba</span></span><br><span class="line"><span class="built_in">print</span>(str2[-3:-1]) <span class="comment"># 45</span></span><br></pre></td></tr></table></figure>

<h2 id="2-functions"><a href="#2-functions" class="headerlink" title="2 functions"></a>2 functions</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">str1 = &apos;hello, world!&apos;</span><br><span class="line"># 通过内置函数len计算字符串的长度</span><br><span class="line">print(len(str1)) # 13</span><br><span class="line"># 获得字符串首字母大写的拷贝</span><br><span class="line">print(str1.capitalize()) # Hello, world!</span><br><span class="line"># 获得字符串每个单词首字母大写的拷贝</span><br><span class="line">print(str1.title()) # Hello, World!</span><br><span class="line"># 获得字符串变大写后的拷贝</span><br><span class="line">print(str1.upper()) # HELLO, WORLD!</span><br><span class="line"># 从字符串中查找子串所在位置</span><br><span class="line">print(str1.find(&apos;or&apos;)) # 8</span><br><span class="line">print(str1.find(&apos;shit&apos;)) # -1</span><br><span class="line"># 与find类似但找不到子串时会引发异常</span><br><span class="line"># print(str1.index(&apos;or&apos;))</span><br><span class="line"># print(str1.index(&apos;shit&apos;))</span><br><span class="line"># 检查字符串是否以指定的字符串开头</span><br><span class="line">print(str1.startswith(&apos;He&apos;)) # False</span><br><span class="line">print(str1.startswith(&apos;hel&apos;)) # True</span><br><span class="line"># 检查字符串是否以指定的字符串结尾</span><br><span class="line">print(str1.endswith(&apos;!&apos;)) # True</span><br><span class="line"># 将字符串以指定的宽度居中并在两侧填充指定的字符</span><br><span class="line">print(str1.center(50, &apos;*&apos;))</span><br><span class="line"># 将字符串以指定的宽度靠右放置左侧填充指定的字符</span><br><span class="line">print(str1.rjust(50, &apos; &apos;))</span><br><span class="line">str2 = &apos;abc123456&apos;</span><br><span class="line"># 检查字符串是否由数字构成</span><br><span class="line">print(str2.isdigit())  # False</span><br><span class="line"># 检查字符串是否以字母构成</span><br><span class="line">print(str2.isalpha())  # False</span><br><span class="line"># 检查字符串是否以数字和字母构成</span><br><span class="line">print(str2.isalnum())  # True</span><br><span class="line">str3 = &apos;  jackfrued@126.com &apos;</span><br><span class="line">print(str3)</span><br><span class="line"># 获得字符串修剪左右两侧空格之后的拷贝</span><br><span class="line">print(str3.strip())</span><br></pre></td></tr></table></figure>

<h2 id="3-output"><a href="#3-output" class="headerlink" title="3 output"></a>3 output</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我们之前讲过，可以用下面的方式来格式化输出字符串。</span><br><span class="line"></span><br><span class="line">a, b = 5, 10</span><br><span class="line">print(&apos;%d * %d = %d&apos; % (a, b, a * b))</span><br><span class="line">当然，我们也可以用字符串提供的方法来完成字符串的格式，</span><br><span class="line">代码如下所示。</span><br><span class="line"></span><br><span class="line">a, b = 5, 10</span><br><span class="line">print(&apos;&#123;0&#125; * &#123;1&#125; = &#123;2&#125;&apos;.format(a, b, a * b))</span><br><span class="line"></span><br><span class="line">Python 3.6以后，格式化字符串还有更为简洁的书写方式，</span><br><span class="line">就是在字符串前加上字母f，</span><br><span class="line">我们可以使用下面的语法糖来简化上面的代码。</span><br><span class="line"></span><br><span class="line">a, b = 5, 10</span><br><span class="line">print(f&apos;&#123;a&#125; * &#123;b&#125; = &#123;a * b&#125;&apos;)</span><br></pre></td></tr></table></figure>

<p>from:<a href="https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/07.字符串和常用数据结构.md" target="_blank" rel="noopener">https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/07.字符串和常用数据结构.md</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>string</tag>
      </tags>
  </entry>
  <entry>
    <title>set and dictionary</title>
    <url>/2019/11/22/%22set%20and%20dictionary%22/</url>
    <content><![CDATA[<h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set1=&#123;6,3,4,2,7&#125;</span><br><span class="line">print(set1)</span><br><span class="line">print(len(set1))</span><br><span class="line">set2 = set(range(1, 10)) #use constructor</span><br><span class="line">set3 = set((1, 2, 3, 3, 2, 1))#use constuvtor</span><br><span class="line">print(set2,set3)</span><br><span class="line">set4 = &#123;num for num in range(1, 10) if num % 3 == 0 or num % 5 == 0&#125;</span><br><span class="line">print(set4)</span><br><span class="line">set1.add(4)</span><br><span class="line">set1.add(5)</span><br><span class="line">set1.add(5)     #no problem, clever python ! </span><br><span class="line">set2.update([11, 12])</span><br><span class="line">print(set2)</span><br><span class="line">set2.discard(5)</span><br><span class="line">print(set2)</span><br><span class="line">set2.discard(5)  #no problem</span><br><span class="line">print(set2)</span><br><span class="line">set2.pop()          #pop from head</span><br><span class="line">print(set2)</span><br><span class="line">print(&quot;.................................&quot;)</span><br><span class="line"></span><br><span class="line"># 集合的交集、并集、差集、对称差运算</span><br><span class="line">print(set1 &amp; set2)</span><br><span class="line"># print(set1.intersection(set2))</span><br><span class="line">print(set1 | set2)</span><br><span class="line"># print(set1.union(set2))</span><br><span class="line">print(set1 - set2)</span><br><span class="line"># print(set1.difference(set2))</span><br><span class="line">print(set1 ^ set2)#(subtravting)</span><br><span class="line"># print(set1.symmetric_difference(set2))</span><br><span class="line"># 判断子集和超集</span><br><span class="line">print(set2 &lt;= set1)</span><br><span class="line"># print(set2.issubset(set1))</span><br><span class="line">print(set3 &lt;= set1)</span><br><span class="line"># print(set3.issubset(set1))</span><br><span class="line">print(set1 &gt;= set2)</span><br><span class="line"># print(set1.issuperset(set2))</span><br><span class="line">print(set1 &gt;= set3)</span><br><span class="line"># print(set1.issuperset(set3))</span><br><span class="line">#print(&#123;1, 2&#125; &gt; &#123;1&#125;)  # True</span><br></pre></td></tr></table></figure>

<h2 id="dictionary"><a href="#dictionary" class="headerlink" title="dictionary"></a>dictionary</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 创建字典的字面量语法</span><br><span class="line">scores = &#123;&apos;骆昊&apos;: 95, &apos;白元芳&apos;: 78, &apos;狄仁杰&apos;: 82&#125;</span><br><span class="line">print(scores)</span><br><span class="line"># 创建字典的构造器语法</span><br><span class="line">items1 = dict(one=1, two=2, three=3, four=4)</span><br><span class="line"># 通过zip函数将两个序列压成字典</span><br><span class="line">items2 = dict(zip([&apos;a&apos;, &apos;b&apos;, &apos;c&apos;], &apos;123&apos;))</span><br><span class="line"># 创建字典的推导式语法</span><br><span class="line">items3 = &#123;num: num ** 2 for num in range(1, 10)&#125;</span><br><span class="line">print(items1, items2, items3)</span><br><span class="line"># 通过键可以获取字典中对应的值</span><br><span class="line">print(scores[&apos;骆昊&apos;])</span><br><span class="line">print(scores[&apos;狄仁杰&apos;])</span><br><span class="line"># 对字典中所有键值对进行遍历</span><br><span class="line">for key in scores:</span><br><span class="line">    print(f&apos;&#123;key&#125;: &#123;scores[key]&#125;&apos;)</span><br><span class="line"># 更新字典中的元素</span><br><span class="line">scores[&apos;白元芳&apos;] = 65</span><br><span class="line">scores[&apos;诸葛王朗&apos;] = 71  #python would add it  </span><br><span class="line">automatically</span><br><span class="line">scores.update(冷面=67, 方启鹤=85)</span><br><span class="line">print(scores)</span><br><span class="line">if &apos;武则天&apos; in scores:</span><br><span class="line">    print(scores[&apos;武则天&apos;])</span><br><span class="line">print(scores.get(&apos;武则天&apos;))</span><br><span class="line"># get方法也是通过键获取对应的值但是可以设置默认值</span><br><span class="line">print(scores.get(&apos;武则天&apos;, 60))</span><br><span class="line"># 删除字典中的元素</span><br><span class="line">print(scores.popitem())</span><br><span class="line">print(scores.popitem())</span><br><span class="line">print(scores.pop(&apos;骆昊&apos;, 100))</span><br><span class="line"># 清空字典</span><br><span class="line">scores.clear()</span><br><span class="line">print(scores)</span><br></pre></td></tr></table></figure>

<p>from:<a href="https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/07.字符串和常用数据结构.md" target="_blank" rel="noopener">https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/07.字符串和常用数据结构.md</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>data structure</tag>
      </tags>
  </entry>
  <entry>
    <title>list in py</title>
    <url>/2019/11/22/%22list%20in%20py%22/</url>
    <content><![CDATA[<h2 id="1-what-is-list-py"><a href="#1-what-is-list-py" class="headerlink" title="1 what is list(py)"></a>1 what is list(py)</h2><p>List in python is barely an array,which can contain int,double,char and etc.<br>And,it is almost the same as vector;</p>
<h2 id="2-commmon-usage"><a href="#2-commmon-usage" class="headerlink" title="2 commmon usage "></a>2 commmon usage </h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">list1 = [1, 3, 5, 7, 100]</span><br><span class="line">print(list1) # [1, 3, 5, 7, 100]</span><br><span class="line">print(len(list1)) # 5</span><br><span class="line">print(list1[-1]) # 100</span><br><span class="line"></span><br><span class="line">for index in range(len(list1)):</span><br><span class="line">    print(list1[index])</span><br><span class="line"># for</span><br><span class="line">for elem in list1:</span><br><span class="line">    print(elem)</span><br><span class="line"># function enumerate</span><br><span class="line">for index, elem in enumerate(list1):</span><br><span class="line">    print(index, elem)</span><br><span class="line"></span><br><span class="line">list1.append(200)</span><br><span class="line">list1.insert(1, 400)    #1-&gt;2 , 1= 400</span><br><span class="line">print(list1)</span><br><span class="line"># list1.extend([1000, 2000])</span><br><span class="line">list1 += [1000, 2000]</span><br><span class="line">print(list1) # [1, 400, 3, 5, 7, 100, 200, 1000, 2000]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">list1.append(1000)</span><br><span class="line">list1.remove(1000)  #only remove the 1000 whith a lower index</span><br><span class="line">print(list1)</span><br><span class="line"></span><br><span class="line">list1.append(1000)</span><br><span class="line">if 1000 in list1:</span><br><span class="line">	list1.remove(1000) #only remove the 1000 with a lower index</span><br><span class="line">print(list1)</span><br><span class="line">    </span><br><span class="line">list1.pop(len(list1) - 1)#the last one poped</span><br><span class="line">print(list1)</span><br><span class="line"></span><br><span class="line">list1.clear()</span><br></pre></td></tr></table></figure>

<h2 id="3-slice"><a href="#3-slice" class="headerlink" title="3 slice"></a>3 slice</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fruits = [&apos;grape&apos;, &apos;apple&apos;, &apos;strawberry&apos;, &apos;waxberry&apos;]</span><br><span class="line">fruits += [&apos;pitaya&apos;, &apos;pear&apos;, &apos;mango&apos;]</span><br><span class="line">fruits2 = fruits[1:5]</span><br><span class="line">print(fruits2) # apple strawberry waxberry pitaya</span><br><span class="line">fruits3 = fruits[:]</span><br><span class="line">print(fruits3) # [&apos;grape&apos;, &apos;apple&apos;, &apos;strawberry&apos;, &apos;waxberry&apos;, &apos;pitaya&apos;, &apos;pear&apos;, &apos;mango&apos;]</span><br><span class="line">fruits4 = fruits[-3:-1]</span><br><span class="line">print(fruits4) # [&apos;pitaya&apos;, &apos;pear&apos;]</span><br><span class="line">fruits5 = fruits[::-1]</span><br><span class="line">print(fruits5) # [&apos;mango&apos;, &apos;pear&apos;, &apos;pitaya&apos;, &apos;waxberry&apos;, &apos;strawberry&apos;, &apos;apple&apos;, &apos;grape&apos;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">list1 = sorted(fruits)#the fruits won&apos;t change</span><br><span class="line">print(list1)</span><br><span class="line">list1.sort(reverse=True)#list3 = sorted(list1, reverse=True)</span><br><span class="line">print(list1)</span><br><span class="line">list4 = sorted(list1, key=len)#sort the strings based on the length</span><br><span class="line">print(list4)</span><br></pre></td></tr></table></figure>

<h2 id="4-generative-formula-amp-generator"><a href="#4-generative-formula-amp-generator" class="headerlink" title="4 generative formula &amp; generator"></a>4 generative formula &amp; generator</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line">f = [x for x in range(1, 10)]</span><br><span class="line">print(f)</span><br><span class="line">f = [x + y for x in &apos;ABCDE&apos; for y in &apos;1234567&apos;]</span><br><span class="line">print(f)</span><br><span class="line"># 用列表的生成表达式语法创建列表容器</span><br><span class="line"># 用这种语法创建列表之后元素已经准备就绪所以需要耗费较多的内存空间</span><br><span class="line">f = [x ** 2 for x in range(1, 10)]</span><br><span class="line">print(sys.getsizeof(f))  # 查看对象占用内存的字节数 192</span><br><span class="line">print(f)</span><br><span class="line"># 请注意下面的代码创建的不是一个列表而是一个生成器对象</span><br><span class="line"># 通过生成器可以获取到数据但它不占用额外的空间存储数据    (额外是指比正常多一点)</span><br><span class="line"># 每次需要数据的时候就通过内部的运算得到数据(需要花费额外的时间)</span><br><span class="line">f = (x ** 2 for x in range(1, 10))</span><br><span class="line">print(sys.getsizeof(f))  # 相比生成式生成器不占用存储数据的空间 120</span><br><span class="line">for val in f:</span><br><span class="line">    print(val)</span><br></pre></td></tr></table></figure>
<h2 id="5-tuple"><a href="#5-tuple" class="headerlink" title="5 tuple"></a>5 tuple</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The tuple is &quot;const&quot;,it&apos;s almost the same as list.</span><br><span class="line"># initialization</span><br><span class="line">t = (&apos;ww&apos;, 38, True, &apos;从重重&apos;)</span><br><span class="line">print(t)</span><br><span class="line"># show the tuple</span><br><span class="line">print(t[0])</span><br><span class="line">print(t[3])</span><br><span class="line"># travelsal the value in tuple</span><br><span class="line">for member in t:</span><br><span class="line">    print(member)</span><br><span class="line"># re-assignment to tuple</span><br><span class="line"># t[0] = &apos;王大锤&apos;  # TypeError</span><br><span class="line"># delete the old tuple and create a new one </span><br><span class="line">t = (&apos;王大锤&apos;, 20, True, &apos;云南昆明&apos;)</span><br><span class="line">print(t)</span><br><span class="line"># change tuple into list</span><br><span class="line">person = list(t)</span><br><span class="line">print(person)</span><br><span class="line"># we can change the element in list</span><br><span class="line">person[0] = &apos;李小龙&apos;</span><br><span class="line">person[1] = 25</span><br><span class="line">print(person)</span><br><span class="line"># change list into tuple </span><br><span class="line">fruits_list = [&apos;apple&apos;, &apos;banana&apos;, &apos;orange&apos;]</span><br><span class="line">fruits_tuple = tuple(fruits_list)</span><br><span class="line">print(fruits_tuple)</span><br><span class="line"></span><br><span class="line">这里有一个非常值得探讨的问题，我们已经有了列表这种数据结构，为什 </span><br><span class="line">么还需要元组这样的类型呢？</span><br><span class="line"></span><br><span class="line">1 元组中的元素是无法修改的，事实上我们在项目中尤其是多线程环境（后  </span><br><span class="line">面会讲到）中可能更喜欢使用的是那些不变对象（一方面因为对象状态不</span><br><span class="line">能修改，所以可以避免由此引起的不必要的程序错误，简单的说就是一个  </span><br><span class="line">不变的对象要比可变的对象更加容易维护；另一方面因为没有任何一个线 </span><br><span class="line">程能够修改不变对象的内部状态，一个不变对象自动就是线程安全的，这  </span><br><span class="line">样就可以省掉处理同步化的开销。一个不变对象可以方便的被共享访 </span><br><span class="line">问）。所以结论就是：如果不需要对元素进行添加、删除、修改的时候,  </span><br><span class="line">可以考虑使用元组，当然如果一个方法要返回多个值，使用元组也是不错的选择。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2 元组在创建时间和占用的空间上面都优于列表。</span><br></pre></td></tr></table></figure>

<p>from:<a href="https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/07.字符串和常用数据结构.md" target="_blank" rel="noopener">https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/07.字符串和常用数据结构.md</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>data structure</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP/IP</title>
    <url>/2019/11/22/TCP:IP/</url>
    <content><![CDATA[<h2 id="what-is-tcp-ip"><a href="#what-is-tcp-ip" class="headerlink" title="what is tcp/ip"></a>what is tcp/ip</h2><p>TCP/IP(Transmission Control Protocol / Internet Protocol) is a computer<br>communication protocol for internet.</p>
<p>The TCP/IP relationship is similar to sending someone a message written on a puzzle through the mail. The message is written down and the puzzle is broken into pieces. Each piece then can travel through a different postal route, some of which take longer than others. When the puzzle pieces arrive after traversing their different paths, the pieces may be out of order. The Internet Protocol makes sure the pieces arrive at their destination address. The TCP protocol can be thought of as the puzzle assembler on the other side who puts the pieces together in the right order, asks for missing pieces to be resent, and lets the sender know the puzzle has been received. TCP maintains the connection with the sender from before the first puzzle piece is sent to after the final piece is sent.</p>
<h2 id="3-handshakes"><a href="#3-handshakes" class="headerlink" title="3 handshakes"></a>3 handshakes</h2><p>For example, when an email is sent over TCP, a connection is established and a 3-way handshake is made. First, the source send an SYN “initial request” packet to the target server in order to start the dialogue. Then the target server then sends a SYN-ACK packet to agree to the process. Lastly, the source sends an ACK packet to the target to confirm the process, after which the message contents can be sent. The email message is ultimately broken down into packets before each packet is sent out into the Internet, where it traverses a series of gateways before arriving at the target device where the group of packets are reassembled by TCP into the original contents of the email.</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>network</tag>
      </tags>
  </entry>
  <entry>
    <title>AI Basics</title>
    <url>/2019/11/22/AI%20Basics/</url>
    <content><![CDATA[<h2 id="Supervised-learning"><a href="#Supervised-learning" class="headerlink" title="Supervised learning"></a>Supervised learning</h2><p><img src="/2019/11/22/AI%20Basics/1.jpg" alt></p>
<p>赛车游戏视频传送门：<a href="https://www.youtube.com/watch?v=wL7tSgUpy8wOpenAI" target="_blank" rel="noopener">https://www.youtube.com/watch?v=wL7tSgUpy8wOpenAI</a> Gym赛车场：<a href="https://gym.openai.com/envs/CarRacing-v0/Flappy" target="_blank" rel="noopener">https://gym.openai.com/envs/CarRacing-v0/Flappy</a> Bird代码传送门：<a href="https://github.com/ssusnic/Machine-Learning-Flappy-BirdPacman代码传送门：https://github.com/Code-Bullet/PacNeat" target="_blank" rel="noopener">https://github.com/ssusnic/Machine-Learning-Flappy-BirdPacman代码传送门：https://github.com/Code-Bullet/PacNeat</a> (NEAT算法)<a href="https://github.com/Code-Bullet/PacmanGame" target="_blank" rel="noopener">https://github.com/Code-Bullet/PacmanGame</a> (搭建游戏环境)</p>
<p>作者：量子位<br>链接：<a href="https://www.zhihu.com/question/31497611/answer/601785142" target="_blank" rel="noopener">https://www.zhihu.com/question/31497611/answer/601785142</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/11/22/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>others</tag>
      </tags>
  </entry>
  <entry>
    <title>data structure in C++</title>
    <url>/2019/11/22/datastructure/</url>
    <content><![CDATA[<h2 id="Union-find"><a href="#Union-find" class="headerlink" title="Union-find"></a>Union-find</h2><ol>
<li>w</li>
</ol>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>data structure</tag>
      </tags>
  </entry>
  <entry>
    <title>homebrew install</title>
    <url>/2019/11/22/homebrew/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/qq_33591200/article/details/82882562" target="_blank" rel="noopener">https://blog.csdn.net/qq_33591200/article/details/82882562</a></p>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>other</tag>
      </tags>
  </entry>
  <entry>
    <title>file operator in python</title>
    <url>/2019/11/22/python%20&amp;%20file/</url>
    <content><![CDATA[<h2 id="read-file"><a href="#read-file" class="headerlink" title="read file"></a>read file</h2><p>To open a file, the file path is nacessary (Relative or absolute path).<br>And, we should set the encoding parameter the same as the file encoding.</p>
<p>there is a example of a txt:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def main():</span><br><span class="line">    f = open(&apos;致橡树.txt&apos;, &apos;r&apos;, encoding=&apos;utf-8&apos;)</span><br><span class="line">    print(f.read())</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>but it is not robust, so we should add sth to avoid program crashes if there is an error.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def main():</span><br><span class="line">    f = None</span><br><span class="line">    try:</span><br><span class="line">        f = open(&apos;致橡树.txt&apos;, &apos;r&apos;, encoding=&apos;utf-8&apos;)</span><br><span class="line">        print(f.read())</span><br><span class="line">    except FileNotFoundError:</span><br><span class="line">        print(&apos;无法打开指定的文件!&apos;)</span><br><span class="line">    except LookupError:</span><br><span class="line">        print(&apos;指定了未知的编码!&apos;)</span><br><span class="line">    except UnicodeDecodeError:</span><br><span class="line">        print(&apos;读取文件时解码错误!&apos;)</span><br><span class="line">    finally:</span><br><span class="line">        if f:</span><br><span class="line">            f.close()</span><br><span class="line"># 3 kinds of errors</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>In Python, we can put the code with potential risk in<br>the “try” block, and set adequate “except” to capture<br>potential errors.  </p>
<p>In this example, imply that there are three kind of<br>errors in file reading.At last we used the finally<br>block to close the file,to free up external resources<br>obtained in the program.We should notice that whether<br>the program is normal or abnormal, it will be executed.  </p>
<p>If you don’t like to use the finally block, you can use<br>context(上下文) syntex.Just specify the context of the file object with the<br>with keyword and automatically release file resources when leaving the context. </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def main():</span><br><span class="line">    try:</span><br><span class="line">        with open(&apos;filename.txt&apos;, &apos;r&apos;, encoding=&apos;utf-8&apos;) as f:</span><br><span class="line">            print(f.read())</span><br><span class="line">    except FileNotFoundError:</span><br><span class="line">        print(&apos;无法打开指定的文件!&apos;)</span><br><span class="line">    except LookupError:</span><br><span class="line">        print(&apos;指定了未知的编码!&apos;)</span><br><span class="line">    except UnicodeDecodeError:</span><br><span class="line">        print(&apos;读取文件时解码错误!&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>Moreover, we can read the file in lines.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import time </span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    with open(&apos;666.txt&apos;,&apos;r&apos;) as f: #we should notice that encoding was not included</span><br><span class="line">        for i in f:</span><br><span class="line">            print(i,end=&apos;&apos;)</span><br><span class="line">            time.sleep(0.2)</span><br><span class="line">    print()</span><br><span class="line"></span><br><span class="line">    #we can read the file in a list too</span><br><span class="line">    with open(&apos;666.txt&apos;,&apos;r&apos;) as f:</span><br><span class="line">        lines = f.readlines()</span><br><span class="line">    print(lines) # print the list line</span><br><span class="line">            </span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h2 id="write-file"><a href="#write-file" class="headerlink" title="write file"></a>write file</h2><p>It is easy, just change the ‘r’ into ‘w’.If you want to append write,<br>use ‘a’, and if the file does not exist, it will be created automatically.  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from math import sqrt</span><br><span class="line"></span><br><span class="line">def is_prime(n):</span><br><span class="line">    &quot;&quot;&quot;判断素数的函数&quot;&quot;&quot;</span><br><span class="line">    assert n &gt; 0  #assert would return the error if we can&apos;t meet its condition</span><br><span class="line">    for factor in range(2, int(sqrt(n)) + 1):</span><br><span class="line">        if n % factor == 0:</span><br><span class="line">            return False</span><br><span class="line">    return True if n != 1 else False</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    filenames = (&apos;a.txt&apos;, &apos;b.txt&apos;, &apos;c.txt&apos;)</span><br><span class="line">    fs_list = []</span><br><span class="line">    try:</span><br><span class="line">        for filename in filenames:</span><br><span class="line">            fs_list.append(open(filename, &apos;w&apos;, encoding=&apos;utf-8&apos;))</span><br><span class="line">        for number in range(1, 10000):</span><br><span class="line">            if is_prime(number):</span><br><span class="line">                if number &lt; 100:</span><br><span class="line">                    fs_list[0].write(str(number) + &apos;\n&apos;)</span><br><span class="line">                elif number &lt; 1000:</span><br><span class="line">                    fs_list[1].write(str(number) + &apos;\n&apos;)</span><br><span class="line">                else:</span><br><span class="line">                    fs_list[2].write(str(number) + &apos;\n&apos;)</span><br><span class="line">    except IOError as ex:</span><br><span class="line">        print(ex)</span><br><span class="line">        print(&apos;写文件时发生错误!&apos;)</span><br><span class="line">    finally:</span><br><span class="line">        for fs in fs_list:</span><br><span class="line">            fs.close()</span><br><span class="line">    print(&apos;操作完成!&apos;)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>


<h2 id="read-and-write-a-binary-file"><a href="#read-and-write-a-binary-file" class="headerlink" title="read and write a binary file"></a>read and write a binary file</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def main():</span><br><span class="line">    try:</span><br><span class="line">        with open(&apos;guido.jpg&apos;, &apos;rb&apos;) as fs1:</span><br><span class="line">            data = fs1.read()</span><br><span class="line">            print(type(data))  # &lt;class &apos;bytes&apos;&gt;</span><br><span class="line">            print(data)</span><br><span class="line">        with open(&apos;吉多.jpg&apos;, &apos;wb&apos;) as fs2:</span><br><span class="line">            fs2.write(data)	# make a duplicate one </span><br><span class="line">    except FileNotFoundError as e:</span><br><span class="line">        print(&apos;指定的文件无法打开.&apos;)</span><br><span class="line">    except IOError as e:</span><br><span class="line">        print(&apos;读写文件时出现错误.&apos;)</span><br><span class="line">    print(&apos;程序执行结束.&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>


<h2 id="json-module"><a href="#json-module" class="headerlink" title="json module"></a>json module</h2><p>from: <a href="https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/11.文件和异常.md" target="_blank" rel="noopener">https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/11.文件和异常.md</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>file</tag>
      </tags>
  </entry>
  <entry>
    <title>decorators in python</title>
    <url>/2019/11/22/py%20decorators/</url>
    <content><![CDATA[<h2 id="What-is-decorator-in-py"><a href="#What-is-decorator-in-py" class="headerlink" title="What is decorator in py?"></a>What is decorator in py?</h2><p>Decorator can modify the function of function in order to simplify the code,<br>which means we can reuse our code wisely.<br>Essentially(本质上), the decorator is a function or a class, it can add sth to function or class<br>without modify the code(just add sth), and it returns a function or a class.</p>
<p>Decorator is often used in scenarios(情景，脚本) with aspect needs.(切面需求  AOP 意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术)<br>for example, Insert log, performance test, transaction processing(事务处理), caching(缓存) and permission check.</p>
<p>let’s learn some preliminary knowledge.</p>
<h2 id="everything-in-python-can-be-an-object"><a href="#everything-in-python-can-be-an-object" class="headerlink" title="everything in python can be an object  "></a>everything in python can be an object  </h2><p>for example, we can use a function as an object.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def hi(name=&quot;yasoob&quot;):</span><br><span class="line">    return &quot;hi &quot; + name</span><br><span class="line"> </span><br><span class="line">print(hi())</span><br><span class="line"># output: &apos;hi yasoob&apos;</span><br><span class="line"> </span><br><span class="line"># we can even assign a function to a variable</span><br><span class="line">greet = hi</span><br><span class="line"># we don&apos;t use the (), because we don&apos;t want to call functions</span><br><span class="line"># but we put it in a varieble &apos;greet&apos;</span><br><span class="line"> </span><br><span class="line">print(greet())</span><br><span class="line"># output: &apos;hi yasoob&apos;</span><br><span class="line"> </span><br><span class="line"># what would happen if we delete the function &apos;hi&apos;?</span><br><span class="line">del hi</span><br><span class="line">print(hi())</span><br><span class="line">#outputs: NameError</span><br><span class="line"> </span><br><span class="line">print(greet())</span><br><span class="line">#outputs: &apos;hi yasoob&apos;</span><br></pre></td></tr></table></figure>

<h2 id="define-and-return-a-function-in-a-function"><a href="#define-and-return-a-function-in-a-function" class="headerlink" title="define and return a function in a function"></a>define and return a function in a function</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def hi(name=&quot;yasoob&quot;):</span><br><span class="line">    def greet():</span><br><span class="line">        return &quot;now you are in the greet() function&quot;</span><br><span class="line"> </span><br><span class="line">    def welcome():</span><br><span class="line">        return &quot;now you are in the welcome() function&quot;</span><br><span class="line"> </span><br><span class="line">    if name == &quot;yasoob&quot;:</span><br><span class="line">        return greet</span><br><span class="line">    else:</span><br><span class="line">        return welcome</span><br><span class="line"> </span><br><span class="line">a = hi()</span><br><span class="line">print(a)</span><br><span class="line">#outputs: &lt;function greet at 0x7f2143c01500&gt;</span><br><span class="line"> </span><br><span class="line">#a-&gt;&amp;greet()</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">print(a())</span><br><span class="line">#outputs: now you are in the greet() function  #a()-&gt;run the function</span><br><span class="line">print(hi()())</span><br><span class="line">#outputs: now you are in the greet() function  #?????</span><br></pre></td></tr></table></figure>

<p>So, we can use function without the “()” as a parameter</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def hi():</span><br><span class="line">    return &quot;hi yasoob!&quot;</span><br><span class="line"> </span><br><span class="line">def doSomethingBeforeHi(func):			#transfer the address of the func</span><br><span class="line">    print(&quot;I am doing some boring work before executing hi()&quot;)</span><br><span class="line">    print(func())</span><br><span class="line">	 # remember that if we don&apos;t use print(), we can&apos;t get the returned on screen</span><br><span class="line">doSomethingBeforeHi(hi)</span><br><span class="line">#outputs:I am doing some boring work before executing hi()</span><br><span class="line">#        hi yasoob!</span><br></pre></td></tr></table></figure>

<h2 id="how-can-we-understand-the-process-of-a-decorator"><a href="#how-can-we-understand-the-process-of-a-decorator" class="headerlink" title="how can we understand the process of a decorator"></a>how can we understand the process of a decorator</h2><p>actually, it is something like this:  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def use_logging(func):</span><br><span class="line"></span><br><span class="line">    def wrapper():		</span><br><span class="line">        logging.warn(&quot;%s is running&quot; % func.__name__)</span><br><span class="line">        return func()   </span><br><span class="line">    return wrapper</span><br><span class="line">#Functions&apos; entrance and exit is an &quot;aspect&quot;.(AOP)</span><br><span class="line">def foo():</span><br><span class="line">    print(&apos;i am foo&apos;)</span><br><span class="line"></span><br><span class="line">foo = use_logging(foo)  # As we returned the func wrapper，it is equal to foo = wrapper(a foo have decorated)</span><br><span class="line">foo()                   # run the decorated foo()</span><br></pre></td></tr></table></figure>

<p>And we have the @ syntactic sugar(语法糖), by using it, we can omit the last step to assign again.  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def use_logging(func):</span><br><span class="line"></span><br><span class="line">    def wrapper():</span><br><span class="line">        logging.warn(&quot;%s is running&quot; % func.__name__)</span><br><span class="line">        return func()</span><br><span class="line">    return wrapper</span><br><span class="line"></span><br><span class="line">@use_logging			#use the @ syntactic sugar before the head of a function</span><br><span class="line">def foo():</span><br><span class="line">    print(&quot;i am foo&quot;)</span><br><span class="line"></span><br><span class="line">foo()					#foo = use_logging(foo) (we have used @ to simplify)</span><br></pre></td></tr></table></figure>
<p>Now we can add sth to the function without modify it, we can reuse the function.</p>
<h2 id="args、-kwargs"><a href="#args、-kwargs" class="headerlink" title="*args、**kwargs"></a>*args、**kwargs</h2><h2 id="decorator-with-parameters"><a href="#decorator-with-parameters" class="headerlink" title="decorator with parameters"></a>decorator with parameters</h2><h2 id="decorator-in-class"><a href="#decorator-in-class" class="headerlink" title="decorator in class"></a>decorator in class</h2><p>Decorators in class have the advantages of great flexibility, high cohesion, and encapsulation.<br>But there is a disadvantage that the meta information of the original function is gone.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Foo(object):</span><br><span class="line">    def __init__(self, func):</span><br><span class="line">        self._func = func</span><br><span class="line"></span><br><span class="line">    def __call__(self):		#method __call__ can call instance object as a function </span><br><span class="line">        print (&apos;class decorator runing&apos;)</span><br><span class="line">        self._func()</span><br><span class="line">        print (&apos;class decorator ending&apos;)</span><br><span class="line">@Foo</span><br><span class="line">def bar():</span><br><span class="line">    print (&apos;bar&apos;)</span><br><span class="line"></span><br><span class="line">bar()</span><br><span class="line"></span><br><span class="line">#class decorator runing</span><br><span class="line">#bar</span><br><span class="line">#class decorator ending</span><br></pre></td></tr></table></figure>

<h2 id="the-order-of-decorator"><a href="#the-order-of-decorator" class="headerlink" title="the order of decorator"></a>the order of decorator</h2><p>We can define many decorator in a single function.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@a</span><br><span class="line">@b</span><br><span class="line">@c</span><br><span class="line">def f ():</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">#f = a(b(c(f)))</span><br></pre></td></tr></table></figure>

<p>from: <a href="https://www.runoob.com/w3cnote/python-func-decorators.html" target="_blank" rel="noopener">https://www.runoob.com/w3cnote/python-func-decorators.html</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>ex</tag>
      </tags>
  </entry>
  <entry>
    <title>some collocation</title>
    <url>/2019/11/22/volcabulary/</url>
    <content><![CDATA[<p>最后一题 可以举具体例子，只要支撑的是主要观点就可以<br>不要太抓细节，选最错误的，森林式做题<br>词头：<a href="https://wenku.baidu.com/view/6245d105b52acfc789ebc98d.html" target="_blank" rel="noopener">https://wenku.baidu.com/view/6245d105b52acfc789ebc98d.html</a><br>TPO 7 T1</p>
<ol>
<li><p>capricious 反复无常：一会这样一会那样<br>Someone who is capricious often changes their mind unexpectedly</p>
</li>
<li><p>arbitrary   不讲事实瞎搞的  ，武断的<br>If you describe an action, rule, or decision as arbitrary, you think that it is not based on any principle, plan, or system. It often seems unfair because of this.    </p>
</li>
<li><p>alternatively ：要不 或者</p>
</li>
<li><p>alternately ：           交替的</p>
</li>
<li><p>一端开口 tube  两端开口 pipe</p>
</li>
<li><p>predomiant侧重主要的,有优势的<br>dominant侧重支配(地位)的</p>
</li>
<li><p>fine powder     细碎的粉末</p>
</li>
<li><p>manifest        显然的，表明</p>
</li>
<li><p>state space    状态空间</p>
</li>
<li><p>[人类] adolescent<br>teenager<br>juvenile</p>
</li>
<li><p>influence     主要指潜移默化的影响，对人的影响</p>
</li>
<li><p>impact 有强大作用，通常表示不好的事情</p>
</li>
<li><p>effect  影响，效应，偏向于结果，effect=have an affect on</p>
</li>
<li><p>consequence: 多指随某一事件引起的，必然或自然的不良结果，不强调直接的因果关系，而侧重事件发展的逻辑关系。</p>
</li>
<li><p><a href="https://wenku.baidu.com/view/3ec3e053360cba1aa911da3c.html" target="_blank" rel="noopener">https://wenku.baidu.com/view/3ec3e053360cba1aa911da3c.html</a></p>
</li>
<li><p>healthhealth[hZlθ; hєlθ]《源自古英语“完全”的意思》名词1 (U)a. (指身心的) 健康,健全.<br>hygienehy.giene[`haIdʒin; ˋhaidʒi:n]《源自希腊文“健康的(技     术) ”的意思》不可数名词1 卫生;<br>sanitationsan不可数名词1 (公共) 卫生2 卫生设备[设施]; (尤指) 下水道设备 </p>
</li>
<li><p>procedsed foods        加工食品</p>
</li>
<li><p>apparatus、instrument、device、equipment、tool、implement、installation、appliance与facilities <a href="https://www.tianfateng.cn/9347.html" target="_blank" rel="noopener">https://www.tianfateng.cn/9347.html</a></p>
</li>
<li><p>exhilaration=pleasure</p>
</li>
<li><p>treat cure mend </p>
</li>
<li><p>rebewable/alternative/clean energy</p>
</li>
<li><p>lurk        （为做不正当的事）潜伏，埋伏</p>
</li>
<li><p>mechanized tools            机械化工具</p>
</li>
<li><p>genetic engineering                gene工程</p>
</li>
<li><p>novice        初学者</p>
</li>
<li><p>flaw            缺点，裂缝</p>
</li>
<li><p>mighty            有力的，极</p>
</li>
<li><p>fluctuation 起伏 波动 fluctuate</p>
</li>
<li><p>form-&gt;formation 形成，构造，编队</p>
</li>
<li><p>endeavor   努力</p>
</li>
<li><p>tangible 有形的(physical)；切实的；可触摸的</p>
</li>
<li><p>empirical     经验主义的 ，实证的</p>
</li>
<li><p>impediment     口吃，妨碍，阻止</p>
</li>
<li><p>conjecture speculate surmise guess     猜测</p>
</li>
<li><p>algebraic        代数的</p>
</li>
<li><p>immense 巨大的 immerse 沉浸</p>
</li>
<li><p>imply implement implementation </p>
</li>
<li><p>proposition 命题  proportion 比例</p>
</li>
<li><p>lade 只能指装货物，装船，勺子舀，load 基本都行 </p>
</li>
<li><p>fanwise    成扇形的        **wise 呈 什么 样子的 </p>
</li>
<li><p>attribute ascribe 把  归因于</p>
</li>
<li><p>the result it desires        它带来的结果</p>
</li>
<li><p>penchant    嗜好，倾向  inclination    倾向，爱好，斜坡&lt;-incline 倾斜，斜坡</p>
</li>
<li><p>detach 分离 </p>
</li>
<li><p>deviation             [ˌdiːviˈeɪʃn] 误差 背离</p>
</li>
<li><p>prevalent 流行的 prevail 盛行</p>
</li>
<li><p>nontheless 尽管如此，但是 hence 因此，今后 whereas 然而，鉴于，反之</p>
</li>
<li><p>spectacular 惊人的 speculate 推测，投机</p>
</li>
<li><p>inherent    intrinsic</p>
</li>
<li><p>instigate    唆使；煽动；教唆；怂恿 investigate 调查，研究 investment 投资</p>
</li>
<li><p>review interview preview</p>
</li>
<li><p>conceal    disguise    camouflage掩盖，隐藏</p>
</li>
<li><p>image 影像，图像，肖像，想象，反映，象征</p>
</li>
<li><p>portion    部分，命运 potion  一剂 饮剂</p>
</li>
<li><p>overt 明显的 covert 隐藏的</p>
</li>
<li><p>convoluted complex complicated </p>
</li>
<li><p>compliment    恭维，称赞，道贺</p>
</li>
<li><p>blue, disappointed, depressed,dampen,deject    沮丧</p>
</li>
<li><p>incongruent</p>
</li>
<li><p>despite 尽管 despise 蔑视</p>
</li>
<li><p>violate / go against / breach /run counter to / contravention</p>
</li>
<li><p>attach 附着 detach 分离 </p>
</li>
<li><p>ensuing == following</p>
</li>
<li><p>maintain== retain</p>
</li>
<li><p>absolutely == utterly == stark</p>
</li>
<li><p>spread == diffuse</p>
</li>
<li><p>agency == force 等于作用</p>
</li>
<li><p>considerable 相当大的，重要的，值得考虑的 considerate 体贴的</p>
</li>
<li><p>inverterate 根深的；积习的；成癖的</p>
</li>
<li><p>fertile fecund loamy 肥沃的 loam 壤土；肥土</p>
</li>
<li><p>proliferation 增值，扩散</p>
</li>
<li><p>readily 容易地；乐意地；</p>
</li>
<li><p>handful 少量的</p>
</li>
<li><p>principal 主要的 资本的 校长 当事人 </p>
</li>
<li><p>inhibit == suppress == restrain == retard</p>
</li>
<li><p>disruption 破坏 瓦解 扰乱 勉强可以视为 disturbance</p>
</li>
<li><p>eradicate eliminate</p>
</li>
<li><p>proponent支持者 detractor 反对者</p>
</li>
<li><p>消毒 disinfect sterilize degassing</p>
</li>
<li><p>substantiate justify testify attest certify demonstrate validate</p>
</li>
<li><p>prolougue epilogue</p>
</li>
<li><p>prestige fame 威望 声望</p>
</li>
<li><p>the bottom fell out of (something)某物价值达到最低水平</p>
</li>
</ol>
<h2 id="生物学"><a href="#生物学" class="headerlink" title="生物学"></a>生物学</h2><ol>
<li>vegetation    植被</li>
<li>shrub        灌木</li>
<li>cetacean    鲸类的</li>
<li>gill        腮 （山谷中的）沟壑，峡流</li>
<li>land dwelling animal    地面居住的动物</li>
<li>otter        水獭；水獭皮</li>
<li>fluke        锚爪，侥幸成功，意外受挫</li>
<li>affinity    密切关系，姻亲关系，吸引力</li>
<li>embed    栽种，嵌入</li>
<li>archaeocyte    原细胞</li>
<li>locomotion    运动</li>
<li>larynx        喉，喉头</li>
<li>covert        隐藏的，动物隐藏的树丛</li>
<li>instinctively        本能的</li>
<li>termite            [ˈtɜːrmaɪt]白蚁</li>
<li>prairie    大草原，牧场 meadow 草地，牧场</li>
<li>marsh            沼泽，湿地</li>
<li>browse    [braʊz] 浏览，吃草</li>
<li>dormancy    休眠，冬眠，蛰伏 hibernate [ˈhaɪbərneɪt] 过冬，冬眠</li>
<li>elevation        高地，海拔，提高</li>
<li>bushy    浓密的，多毛的，灌木茂密的</li>
<li>understory        林下叶层，下层植被</li>
<li>cedar        雪松，香柏 hemlock    铁杉</li>
<li>arboreal        树木的，树栖的</li>
<li>fodder        饲料，喂</li>
<li>狩猎动物英文名称：game animal定义：种群较大，繁殖率较高，可以开放供猎手狩猎的物种。通常是野生有蹄类动物</li>
<li>succulent 多汁的，多水分的</li>
<li>herd        兽群，放牧，使成群</li>
<li>microelement    微量元素</li>
<li>chlorophyl chlororhyll 叶绿素</li>
<li>anthocyanin 花青素；[生化] 花色素甙</li>
<li>stunted 发育不良的</li>
<li>phosphorus    [ˈfɑːsfərəs]  磷</li>
<li>petiole 叶柄</li>
<li>vein 血管；叶脉；[地质] 岩脉；纹理；翅脉；性情</li>
<li>pathogen    病原体</li>
<li>alpine    高山的</li>
<li>eukaryon [ju:’kæriɔn] 真核细胞，真核生物</li>
<li>Cambrian    寒武纪</li>
<li>nectar    花蜜</li>
<li>beak        鸟嘴</li>
<li>vitality    vigor 活力，精力</li>
<li>vibrant 充满生机的</li>
<li>scorch 枯萎，烧焦</li>
<li>sac囊</li>
<li>behind(动物)==bottom(人)==ass</li>
<li>delineate 划界线，界定，描绘</li>
<li>bivalve    双壳贝，双壳类</li>
<li>fertility 生育能力 受精</li>
<li>nourishment    食物；营养品；滋养品</li>
<li>endotherm 恒温动物 poikilotherm 变温动物</li>
<li>glandular 腺体，腺</li>
<li>faunal 动物区系的 floral 花的，植物的</li>
<li>trilobite 三叶虫</li>
<li>brine 卤水，海水</li>
<li>desiccation 干燥</li>
<li>pore 毛孔气孔</li>
<li>scavenger 食腐动物</li>
<li>barren 贫瘠的 desolate 荒芜的 deserted 荒芜的</li>
<li>hospitable 热情友好的；（环境）舒适的</li>
<li>prosper == thrive == flourish</li>
<li>pathogen 病菌，病原体</li>
<li>impulse 冲动；[电子] 脉冲；刺激；神经冲动；推动力 </li>
<li>elude 逃避追捕</li>
<li>stage mock fights</li>
<li>stalk 跟踪</li>
<li>fern蕨类</li>
<li>lumber timber木材</li>
<li>deciduous tree 落叶树 evergreen tree    conifer针叶树</li>
<li>prairie meadow 草原</li>
<li>bark树皮，狗吠， stem stalk茎  foliage leaflet 叶子</li>
<li>spore 孢子 husk 壳</li>
<li>germinate 发芽sprout burgeon</li>
<li>shoot嫩芽 blight 枯萎 </li>
<li><ol start="115">
<li>feitilize 受精</li>
</ol>
</li>
<li>hibernate dormancy 冬眠</li>
<li>inbreed 近亲繁殖</li>
<li>porpoise 鼠海豚 </li>
<li>heredity 遗传 innate 天生的trait 特征 instinct本能 offspring 后代<br>mutation 物种变异 toxin毒素 noxious有毒的 glucose 葡萄糖</li>
<li>plankton浮游生物 fauna动物类 gland腺体 rodent啮齿类 herd 兽群</li>
<li>angiosperm</li>
<li>budding 发芽</li>
<li>exhausted==knackered</li>
<li>steppe 大草原  [step]</li>
<li>enzyme 酶</li>
<li>plumage 鸟羽毛，翅膀</li>
</ol>
<h2 id="历史文化类"><a href="#历史文化类" class="headerlink" title="历史文化类"></a>历史文化类</h2><p>闪米特 雅利安 mesopotamia=两河流域=现在伊拉克附近</p>
<ol>
<li>graze             擦伤，放牧[ɡreɪz]   grease 油脂 润滑油[ɡriːs] herd 放牧</li>
<li>artifact        工艺品</li>
<li>civilized         农耕民族 citizen 市民，国民</li>
<li>brute-like        游牧民族    brute 残忍的 无理性的 野兽的</li>
<li>institution        制度</li>
<li>indigenous 土著的 当地的 custom 习俗</li>
<li>lead 铅 tin 锡</li>
<li>pictograph    埃及的象形文字</li>
<li>portray         描绘 delineate depict</li>
<li>frontality        正面像</li>
<li>cult &amp;&amp; rite    宗教，祭祀典礼   比ceremony精准    </li>
<li>wheat        小麦</li>
<li>cuneiform     楔形文字</li>
<li>tracts and fields    田径</li>
<li>Coloseum    斗兽场</li>
<li>arena        竞技场</li>
<li>gladiator        角斗士</li>
<li>disdain        蔑视</li>
<li>epistle        书信</li>
<li>highway        公路，大路</li>
<li>lime 石灰            cement 水泥</li>
<li>sewer        下水道</li>
<li>invasion-&gt;invade</li>
<li>crop rotation    轮作</li>
<li>husbandry    养殖</li>
<li>monarchy    君主制</li>
<li>feudal        封建制</li>
<li>house of representative 众议院</li>
<li>house of senate        参议院</li>
<li>parliament    议会</li>
<li>congress        国会（议会）</li>
<li>capitalism    资本主义</li>
<li>prosperous    flourish    繁荣</li>
<li>legislation    立法</li>
<li>limited government    小政府</li>
<li>bombard 轰击  bombar 古大炮</li>
<li>anthropology    人类学</li>
<li>envision        想象，预想</li>
<li>myth 神话 ritual [ˈrɪtʃuəl] &lt;–  rite 仪式，习俗，典礼 [raɪt]</li>
<li>aesthetic        美学的，审美的</li>
<li>pantomime        哑剧</li>
<li>theatrical        戏剧性的</li>
<li>virtuosity        精湛技巧；对艺术品的爱好；艺术爱好者</li>
<li>antecedent        n. 前情；祖先；（语法）先行词；前件</li>
<li>reclamation        开垦，收回，再利用</li>
<li>reclaim             开拓，抗议，感化</li>
<li>peasant            农民 [ˈpeznt]</li>
<li>surplus            剩余，盈余</li>
<li>textile            纺织品</li>
<li>rye                黑麦</li>
<li>guilders            荷兰盾，金币</li>
<li>pottery    陶器 porcelain  [ˈpɔːrsəlɪn] 瓷器 earthenware陶器，土器 stoneware瓷器，石器</li>
<li>ceramic            制陶术，制陶业 kiln 窑</li>
<li>utilitarian    [,jutɪlɪ’tɛrɪən]    功利的，实用的</li>
<li>burial 葬礼</li>
<li>delineate      [dɪˈlɪnieɪt]    vt. 描绘；描写；画…的轮廓</li>
<li>ornament        装饰物，教堂用品</li>
<li>pigment            色素，颜料，涂色</li>
<li>emblem             象征</li>
<li>secular            世俗的，不朽的，俗人</li>
<li>manufacture        制造业，产品</li>
<li>livestock                牲畜</li>
<li>parlor                客厅，会客厅</li>
<li>arcade                拱廊，游乐场</li>
<li>igloo                    圆顶建筑</li>
<li>adobe    [əˈdəʊbi]        粘土，土砖</li>
<li>rancher                大农场经营者，大农场工人</li>
<li>sorghum        [ˈsɔːrɡəm]        高粱</li>
<li>maize        [meɪz]            玉米</li>
<li>corn    美 玉米 英 谷物</li>
<li>game    狩猎动物</li>
<li>engrave    雕刻</li>
<li>trace     痕迹，追溯</li>
<li>excavate        挖掘</li>
<li>smelter        熔炉，冶金厂</li>
<li>canoe        独木舟</li>
<li>tragedy [ˈtrædʒədi] 悲剧；灾难；惨案strategy策略</li>
<li>slack 萧条的</li>
<li>effulgent    光辉灿烂的</li>
<li>shrine n. 圣地；神殿；神龛；圣祠</li>
<li>fabricate 伪造，编织(fabric植物) forge 伪造，铸造 forgery 赝品</li>
<li>incantation 咒语</li>
<li>steam locomotive 蒸汽火车头</li>
<li>social norm 社会准则</li>
<li>nomadic 游牧的，流浪的 nomad 游牧民</li>
<li>incarnate 化身的，人体化的，体现，拟人化</li>
<li>deity  [‘diəti]  神明</li>
<li>worship 崇拜 尊敬 爱慕</li>
<li>procreative  生产的，生殖的；有生殖力的</li>
<li>nurture [ˈnɜːrtʃər] 养育；鼓励；培植</li>
<li>instinct 本能，直觉</li>
<li>sterile 贫瘠的</li>
<li>potsherd 陶瓷碎片</li>
<li>chronology 年表；年代学</li>
<li>demise 死亡，终止，传位，遗赠</li>
<li>lane 小巷 航线 车道</li>
<li>monolithic 巨大的 统一的</li>
<li>garrison [ˈɡærɪsn] 要塞 卫戍部队</li>
<li>cavalry 骑兵</li>
<li>metallurgy 冶金学</li>
<li>ingenious 有独创性的 心灵手巧的</li>
<li>languish 发展缓慢的，憔悴；凋萎；失去活力；苦思</li>
<li>strain 压力，品种，思想流态</li>
<li>commodity 商品，货物，日用品</li>
<li>inveterate 根深的；积习的；成癖的</li>
<li>fringe 边缘 穗 刘海</li>
<li>cottage农舍（以前叫做农舍生产）</li>
<li>pig iron /wrought iron 熟铁  wrought [rɔːt]加工的；精细的</li>
<li>asset fortune opulence财富// drawback(退款) remuneration 报酬赔偿</li>
<li>benefits 利益 profit revenue收入</li>
<li>indigent == poverty // deficit赤字.//depreciate 贬值</li>
<li>merchandise 商品 M&amp;A企业并购 transaction 交易</li>
<li>levy 征收 levy tax // commission 佣金</li>
<li>grant 拨款 lucrative挣钱的 reputation名声 pension退休金</li>
<li>scoop pick delve excavate</li>
<li>chronological 按时间年代分布</li>
<li>aesthetic picturesque sculpture </li>
<li>lyric tragedy fable satrie rhetoric metaphor </li>
<li>hominid 原始祖先  ancesctor == forerunner == predecessor </li>
<li>Aboriginal 土著的 ethnology 人种学</li>
<li>ethnic racial national   descent ancestry</li>
<li>genteel courteous well -bred</li>
<li>taboo ban prohibiton </li>
<li>ethic marital household</li>
<li>stereotype resent spontaneous grief/grievous </li>
<li>pillar 柱子 </li>
<li>edifice 大厦</li>
<li>metropolis 大都市 首府 重要中心</li>
<li>pastoralism 畜牧</li>
<li>caravan [ˈkærəvæn] 大篷车 沙漠旅行队</li>
<li>artisan 技工</li>
<li>guild [ɡɪld] 协会，行会</li>
<li>sect 宗派</li>
<li>kinship [ˈkɪnʃɪp]亲属关系</li>
<li>ideological  [ˌaɪdiəˈlɒdʒɪkl]意识形态上的 思想的</li>
<li>shepherd  [ˈʃepərd] 牧羊人 领导者</li>
<li>confederate 同盟国 联合的</li>
</ol>
<h2 id="天文学-气象学meteorology"><a href="#天文学-气象学meteorology" class="headerlink" title="天文学/气象学meteorology"></a>天文学/气象学meteorology</h2><ol>
<li>astronomer 天文学家 </li>
<li>cosmonaut 俄罗斯宇航员    astronaut 美国宇航员  taikongnaut 中国航天员</li>
<li>astrology    观星学</li>
<li>cosmology 宇宙学</li>
<li>nebula nebulae（拉） 星云</li>
<li>dwarf star        矮星</li>
<li>constellation    星座    stella星</li>
<li>zodiac        黄道十二宫</li>
<li>galaxy        银河</li>
<li>star 恒星 planet 行星 moon/satellite 卫星 </li>
<li>meteor 流星 comet 彗星 planetoid 小行星</li>
<li>Mercury 水星  Venus 金星 Earth 地球 Mars 火星 Jupiter 木星 Saturn 土星 Uranus 天王星 Neptune 海王星 Pluto 冥王星</li>
<li>diameter        直径</li>
<li>terrestrial plant     类地行星</li>
<li>Jovian plant        类木行星</li>
<li>molecule            分子，微粒</li>
<li>orbit 轨道</li>
<li>spin    旋转</li>
<li>hail                冰雹</li>
<li>convection        对流</li>
<li>cold front         冷峰</li>
<li>condense        凝结    con聚集 dense密度</li>
<li>monsoon        季风</li>
<li>mediterranean climate 地中海气候</li>
<li>warm air mass     暖气团</li>
<li>tropical strom 热带风暴-&gt;typhoon 台风太平洋 </li>
<li>monsoon            季风  太平洋-&gt;typhoon  其他-&gt;hurricane</li>
<li>moisture 尤其指食物或人体的某个部位稍微有些潮湿，不干燥，常指湿得正合人意。<br>humidity 是指大气的湿气</li>
<li>dew 露 frost 霜（foster 促进，抚育）</li>
<li>frontal edge    锋面 </li>
<li>millennium millennia(复数)        千年</li>
<li>instrument record 仪器记录（人） proxy(代理) record 替代记录（自然）</li>
<li>ambient 周围的；外界的；环绕的</li>
<li>calcite    方解石（碳酸钙的稳定结晶）</li>
<li>ocean floor sediment（沉积物）</li>
<li>fluctuate   波动；涨落；动摇</li>
<li>extent是个名词，意为“程度；范围；长度”。<br>eg: The Internet is just like a double-edged sword. Whether it does good or harm to us depends, to a great extent, on how we exploit and use it.  互联网就像一把双刃剑。它对我们有益还是有害在很大程度上取决于我们如何开发利用它。<br>extend和expand都是动词，extend本意为stretch out,它侧重是二维的平面的延伸。而expand可以指三维意义上的膨胀，与contract ‘收缩’相对。<br>extend是指延伸，extend:make sth.longer / larger / wider in time, space,area.<br>eg: We have the desire to know more things about this world and is can extend our visual field. 我们想了解更多有关于这个世界的东西并拓宽自己的视野。<br>expand含有膨胀的意思，人口激增就用expansion 。expand: become greater in size, number or importance<br>eg: The big western oil companies are trying to expand through acquisitions and investment, but the opportunities do so are becoming scarcer. 西方的石油大公司在尝试通过并购和投资来扩张,不过这样的机会已经越来越少。</li>
<li>deliberate 故意的，从容的，商议  deliberation 审议；考虑；从容；熟思</li>
<li>scarce [skers] 缺乏的，不足的 sacred [ˈseɪkrɪd] 神圣的 scare 惊吓</li>
<li>account for 对…负有责任；对…做出解释；说明……的原因；导致</li>
<li>retreat         撤退</li>
<li>aerolite 陨石</li>
<li>optical radio 光学，射电望远镜</li>
<li>anagalactic nebula    河外星系</li>
<li>dwarf 矮星 dwarf planet 矮行星(Pluto)</li>
<li>rotate 自转 revolve 公转</li>
<li>elliptical orbit 椭圆轨道</li>
<li>luminous 照亮 spectrum光谱 范围</li>
<li>revolve revolution 公转 rotate 自转</li>
<li>constallation    星座 星群</li>
<li>astrolabe 星盘，天体观测仪</li>
</ol>
<h2 id="地质学"><a href="#地质学" class="headerlink" title="地质学"></a>地质学</h2><ol>
<li>continent 大陆，洲，陆地</li>
<li>crust        地壳</li>
<li>layer -&gt;（拉）stratum strata</li>
<li>mantle     地幔</li>
<li>plate         板块</li>
<li>earthquake    (quake,tremor,seism)</li>
<li>seismology        地震学</li>
<li>hypocenter(focus)    震源</li>
<li>crater 坑 火山口 环形山</li>
<li>lava 密度大  magma 密度小 岩浆</li>
<li>geological term/time 地质时间 100万年</li>
<li>geological time scale        地质年代表</li>
<li>seism prospecting（前途；预期；景色；勘探） 地质勘探</li>
<li>geothermal        地热的        </li>
<li>debris             碎片，残骸</li>
<li>ore deposit 都可作矿</li>
<li>zinc 锌  mercury 水银（水星）nickle 镍</li>
<li>sapphire 蓝宝石 </li>
<li>marble 大理石 granite 花岗石 limestone 石灰石</li>
<li>composition作文，作曲，作品；[材] 构成；合成物；成分</li>
<li>decomposition 分解</li>
<li>erode -&gt; erosion 动词de结尾，变名词sion结尾</li>
<li>sedimentary rock 沉积岩 metamorphic rock 变质岩</li>
<li>basalt 玄武岩 （一种火山岩）</li>
<li>karst landform -&gt; water erosion</li>
<li>submarine 水下的，潜水艇</li>
<li>paleontology 古生物学</li>
<li>excavate unearth 挖掘</li>
<li>Paleozoic 古生代 Mesozoic 中生代 Cenozoic/Kainozoic 新生代</li>
<li>demise         死亡，终止</li>
<li>plate tectonic     板块构造学</li>
<li>Mesozoic &lt;&lt; triasic(三叠纪) &lt;&lt; Jurasic&lt;&lt;Cretaceous(白垩纪) </li>
<li>succession 演替 fossil succession</li>
<li>stratigraphy 地层学；地层中的岩石组成 strata[ˈstreɪtə]地层</li>
<li>elapse 时间的消逝</li>
<li>sediment     沉积物</li>
<li>igneous    [岩] 火成的；似火的 igneous rock 岩浆岩</li>
<li>gauge 计量器，测量</li>
<li>sulfate 硫酸盐 carbonate 碳酸盐 nitrate 硝酸盐 </li>
<li>calcium 钙 magnesium 镁 manganese 猛</li>
<li>Tertiary 第三纪</li>
<li>saturate             浸透，使湿透，使饱和，使充满</li>
<li>meteoric         大气的，流星的，极速的</li>
<li>meteoric water    大气降水</li>
<li>precipitation        降水，冰雹，沉淀</li>
<li>grain            粮食，颗粒，谷物</li>
<li>pebble 卵石  gravel [ˈɡrævl] 碎石、沙砾</li>
<li>consolidate        加强，巩固     unconsolidate sands || consolidated == cemented</li>
<li>sediment        沉积，沉积物    可指 沙子，小石头</li>
<li>inland            内陆的，内地的</li>
<li>pore                小孔</li>
<li>dissolve            使溶解，使分解，使液化</li>
<li>percolate 过滤，渗出，浸透 saturate 浸透 permeate 浸透 透过 porous 多孔能渗透的（pore）</li>
<li>cavity            腔，孔，凹处 </li>
<li>crevice            裂缝，缝隙</li>
<li>holocene                （地质学）全新世纪元；全新世纪岩石系列</li>
<li>ridge 山脊</li>
<li>aquifer            蓄水层</li>
<li>cliff        悬崖，绝壁</li>
<li>etch 蚀刻  engrave</li>
<li>bas-relief    浅浮雕</li>
<li>course of river 河道</li>
<li>petrifaction n. 石化；化石；吓呆</li>
<li>ornament 装饰；[建][服装] 装饰物；教堂用品</li>
<li>granular 颗粒状的 gravel 碎石 沙砾</li>
<li>firn 积雪</li>
<li>flake n. 小薄片，碎片；古怪的人；搁架；坚硬石片；</li>
<li>interplanetary    太阳系内的，行星间的</li>
<li>outcrop 露头，露出地面的岩层</li>
<li>canal  运河；[地理] 水道</li>
<li>stratum\strata    地层，层</li>
<li>gypsum     石膏</li>
<li>underpinnin 基础，基础材料；[矿业] 支柱，支承结构；支撑</li>
<li>silt 淤泥，泥沙</li>
<li>shale 页岩，泥板岩</li>
<li>interbedded    夹层的，夹层之间的</li>
<li>particle granule grain 颗粒</li>
<li>sediment precipitate subside deposit 沉淀</li>
<li>soluble 可溶的 [ˈsɑːljəbl]</li>
<li>deluge [ˈdeljuːdʒ] 洪水 泛滥 暴雨</li>
<li>cascade 小瀑布 倾泻</li>
<li>fault 断层</li>
<li>geologic agency == geologic process 地质作用</li>
<li>insular 海岛的 ledge 暗礁 channel 海峡 航道 引流-》direct</li>
<li>lithosphere 岩石圈 mantle strata</li>
<li>continental drift 大陆漂移 collide碰撞 weather 风化fracture断裂</li>
<li>debris 岩石碎片 equator 赤道 gulf 海湾</li>
<li>soak 浸泡</li>
<li>concentration 浓度</li>
<li>hydrologic 水文的</li>
<li>estuary 河口江口</li>
<li>massif 山丘 断层块 大厦</li>
<li>crevice 裂痕裂缝[ˈkrevɪs]</li>
<li>equatorial 赤道的</li>
<li>peninsula 半岛</li>
<li>sinkhole 排水口 cenote [sɪ’notɪ]天然井</li>
<li>avalanche 雪崩</li>
<li>lapis 石</li>
</ol>
<h2 id="心理学"><a href="#心理学" class="headerlink" title="心理学"></a>心理学</h2><ol>
<li>pathology  病理学；病状；精神异常；社会异常；语言异常</li>
<li>nihilism    虚无主义；无政府主义；恐怖行为</li>
<li>forthright     直率的，直接了当的</li>
<li>fortitude    刚毅；不屈不挠；勇气</li>
<li>manipulate    操纵，操作</li>
<li>manifestation    表现，显示</li>
<li>lithosphere 岩石圈</li>
<li>conglomerate 企业集团；聚合物；砾岩</li>
</ol>
<h2 id="句子"><a href="#句子" class="headerlink" title="句子"></a>句子</h2><ol>
<li>To present several factors that may contribute to a satisfactory explanation of that phenomenon.意思是列举能解释现象的几个可能原因，不是指为了某个explanation服务</li>
</ol>
<h2 id="口语"><a href="#口语" class="headerlink" title="口语"></a>口语</h2><h2 id="听力"><a href="#听力" class="headerlink" title="听力"></a>听力</h2><p>顺序和定义</p>
<ol>
<li>recitation  背诵，朗诵，详述，复习课</li>
<li>intangible 无形的，触摸不到的，难以理解的</li>
<li>mandatory 强制的；托管的；命令的</li>
<li>handouts   讲义，宣传品</li>
<li>coupon。 优惠券；息票；赠券；联票；配给券；订货单；参赛表格</li>
<li>peer assistant programs        学生互助项目</li>
<li>notify        通告，公布</li>
<li>extenuating。情有可原的；使减轻的</li>
<li>letter grade    字母等级 比如 A的100点</li>
<li>transgress     违反，侵犯，犯罪</li>
<li>albeit            虽然</li>
<li>let’s talk content        我们进入正题 </li>
<li>correlate 关联</li>
<li>pervasive                普遍的，流行的</li>
<li>notion                概念，见解，打算</li>
<li>exceptionally                异常的，例外的</li>
<li>vent 进出口，感情的发泄</li>
</ol>
<h2 id="art"><a href="#art" class="headerlink" title="art"></a>art</h2><ol>
<li>portrait    肖像，描写 1</li>
<li></li>
</ol>
<h1 id="CS"><a href="#CS" class="headerlink" title="CS"></a>CS</h1><h2 id="math"><a href="#math" class="headerlink" title="math"></a>math</h2><p>Expression的中文是“表达式”。表达式由数和代数组成，比如3, 3x,3x+5a等等。</p>
<p>   Equation的中文是”等式”，两个表达式用等号连起来，如3x=56+a。等号两边都是表达式。如果目的是根据等式来求未知数的，那么equation叫方程。</p>
<p>   Formula是一种特殊等式，比如圆的周长s=2πR。这相当于中文的公式。</p>
<p>   Identity也是一种特殊的等式，叫恒等式(An identity is an equation that is always true, no matter what values are chosen)，如a+b=b+a.</p>
<h2 id="algorithm"><a href="#algorithm" class="headerlink" title="algorithm"></a>algorithm</h2><ol>
<li>permutation 排列，置换</li>
<li>monotonically 单调的</li>
<li>congruence        一致，适合，[数] 全等</li>
<li>modulo            按模的    %</li>
<li>reminder            [数] 余数，残余；剩余物；剩余的；吃剩的</li>
</ol>
<h1 id="词根"><a href="#词根" class="headerlink" title="词根"></a>词根</h1><ol>
<li>pro- 向前的      protrude 伸出  propose 建议打算</li>
</ol>
]]></content>
      <categories>
        <category>eg</category>
      </categories>
      <tags>
        <tag>eg</tag>
      </tags>
  </entry>
  <entry>
    <title>python &amp; class</title>
    <url>/2019/11/22/python%20&amp;%20class/</url>
    <content><![CDATA[<h2 id="what-is-Object-oriented"><a href="#what-is-Object-oriented" class="headerlink" title="what is Object-oriented?"></a>what is Object-oriented?</h2><ol>
<li><p>process-oriented programming<br>advantages: fast, assembly-line-like<br>disadvantages: hard to maintain, reuse and expand<br>(the code is very long and independent, and hard to be modified)   </p>
</li>
<li><p>object-oriented programming<br>advantages: easy to maintain, reuse and expand<br>(the code is shorter and easier to read, and much more flexible)<br>disadvantages: slower, more complex,huge class library  </p>
</li>
</ol>
<p><img src="/2019/11/22/python%20&%20class/blogpy1.png" alt></p>
<h2 id="basics"><a href="#basics" class="headerlink" title="basics"></a>basics</h2><ol>
<li>data + method = object  </li>
<li>‘similar’ objects = class</li>
<li>we can use encapsulation(封装) in class to hide the details</li>
<li>we can use inheritance(继承) to specialize or generalize</li>
<li>we can imply dynamic dispatch based on object type by using polymorphism</li>
<li>class is the blueprint of object, while object is the instance of class </li>
</ol>
<h2 id="“private”-in-python"><a href="#“private”-in-python" class="headerlink" title="“private” in python"></a>“private” in python</h2><p>If you want to define a “private” member, you can define it as __name.<br>Actually, it is not “private”, we can access by analysing its name.<br>__name-&gt;private, _name-&gt;protected  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Test:</span><br><span class="line"></span><br><span class="line">    def __init__(self, foo): #constuctor</span><br><span class="line">        self.__foo = foo</span><br><span class="line">#we can analogy self to *this in C</span><br><span class="line">    def __bar(self):</span><br><span class="line">        print(self.__foo)</span><br><span class="line">        print(&apos;__bar&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    test = Test(&apos;hello&apos;)</span><br><span class="line">    test._Test__bar()</span><br><span class="line">    print(test._Test__foo)</span><br><span class="line"># we can access the __foo in this way</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h2 id="getter-and-setter"><a href="#getter-and-setter" class="headerlink" title="getter and setter"></a>getter and setter</h2><p>If we use instance.property(属性，财产等), the name of our private members would be exposed, and others can access it.To avoid it, the getter and setter method are necessary.<br>And we can check the input here.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line"></span><br><span class="line">    def get_score(self):</span><br><span class="line">         return self._score</span><br><span class="line"></span><br><span class="line">    def set_score(self, value):</span><br><span class="line">        if not isinstance(value, int):	#judge the type of instance</span><br><span class="line">            raise ValueError(&apos;score must be an integer!&apos;)</span><br><span class="line">        if value &lt; 0 or value &gt; 100:</span><br><span class="line">            raise ValueError(&apos;score must between 0 ~ 100!&apos;)</span><br><span class="line">        self._score = value</span><br><span class="line"></span><br><span class="line">if __name__ == :&quot;__main__&quot;:</span><br><span class="line">	s = Student()</span><br><span class="line">	s.set_score(60)</span><br><span class="line">	s.get_score()</span><br></pre></td></tr></table></figure>

<p>To simplify, the built-in decorator @property(属性，性能，财产) is the best choice.<br>It can change a method to a property.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line"></span><br><span class="line">    @property</span><br><span class="line">    def birth(self):</span><br><span class="line">        return self._birth</span><br><span class="line"></span><br><span class="line">    @birth.setter		#r, ifndef it, it is an read-only property</span><br><span class="line">    def birth(self, value):</span><br><span class="line">        self._birth = value</span><br><span class="line"></span><br><span class="line">    @property				</span><br><span class="line">    def age(self):</span><br><span class="line">        return 2015 - self._birth</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">	s = Student()</span><br><span class="line">	s.score=60</span><br><span class="line">	print(s.score)</span><br></pre></td></tr></table></figure>


<h2 id="super"><a href="#super" class="headerlink" title="super()"></a>super()</h2><p><a href="https://www.runoob.com/python/python-func-super.html" target="_blank" rel="noopener">https://www.runoob.com/python/python-func-super.html</a></p>
<h2 id="instance-method-amp-classmethod-amp-staticmethod"><a href="#instance-method-amp-classmethod-amp-staticmethod" class="headerlink" title="instance method &amp; classmethod &amp; staticmethod"></a>instance method &amp; classmethod &amp; staticmethod</h2><p>instance method<br>This is the general method to call function in a class.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class A:</span><br><span class="line">    def foo(self, x):</span><br><span class="line">        print(&quot;running foo(%s, %s)&quot; % (self, x))</span><br><span class="line"></span><br><span class="line"># we need an instance to call the function</span><br><span class="line">a = A()</span><br><span class="line">a.foo(&quot;test&quot;)</span><br></pre></td></tr></table></figure>

<p>classmethod<br>If we don’t need interaction with instance, we can call<br>function with the name of class. The class method passing a whole class.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">class A:</span><br><span class="line">    class_attr = &quot;attr&quot;</span><br><span class="line">    </span><br><span class="line">    def __init__(self):</span><br><span class="line">        pass</span><br><span class="line">        </span><br><span class="line">    @classmethod</span><br><span class="line">    def class_foo(cls):</span><br><span class="line">        print(&quot;running class_foo(%s)&quot; % (cls.class_attr))</span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">a.class_foo()</span><br><span class="line">A.class_foo()</span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">static method  </span><br><span class="line">It is sth like static in c++,similar to instance  </span><br><span class="line">method, and free of the self parameter.</span><br></pre></td></tr></table></figure>
<h1 id="coding-utf-8"><a href="#coding-utf-8" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>log_enabled = True</p>
<p>class A:<br>    class_attr = “attr”</p>
<pre><code>def __init__(self):
    pass

@staticmethod
def static_foo():
    if log_enabled:
        print(&quot;log is enabled&quot;)
    else:
        print(&quot;log is disabled&quot;)</code></pre><p>A.static_foo()</p>
<p>```</p>
<p>thx:<a href="https://www.cnblogs.com/zhangmingyan/p/11424562.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhangmingyan/p/11424562.html</a><br>thx:<a href="https://www.cnblogs.com/miqi1992/p/8343234.html" target="_blank" rel="noopener">https://www.cnblogs.com/miqi1992/p/8343234.html</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>OO</tag>
      </tags>
  </entry>
  <entry>
    <title>some collocation</title>
    <url>/2019/11/22/%E5%86%99%E4%BD%9C%E7%A7%AF%E7%B4%AF/</url>
    <content><![CDATA[<p>综合写作一定要强调哪些是writer哪些是reader<br>综合写作强调逻辑性和听力的细节，不要太关注词汇<br>小逻辑连缀，不要跳跃</p>
<p>论证方法：<a href="https://www.bilibili.com/read/cv1263818/" target="_blank" rel="noopener">https://www.bilibili.com/read/cv1263818/</a><br>下义词发展<br>除非有绝对词，不要写让步段，太水<br>不要老写对面的缺点，多讲自己的好<br>分论点不准抽象，这种文章要落地<br>对象法，对不同对象的影响<br>一定要注重流畅性和逻辑性<br>看范文如何写够字数</p>
<p>自由写作<br>5min写出开头结尾段<br>先写中心句<br>collocation</p>
<hr>
<ol>
<li>like-minded people     志趣相投者</li>
<li>a compelling example         令人信服的例子    compel  强迫</li>
<li>miss out on                 错失</li>
<li>a coveted goal             一个想要达成的目标  covet 垂涎，觊觎</li>
<li>parrot what is written in books     照着书念</li>
<li>honed skills                 磨练过的技巧</li>
<li>share opinions            交流分享观点</li>
<li>stimulating environment        有启发的环境   stimulating 刺激的，促进</li>
<li>mutual cooperation             相互合作  mutual 相互的，共同的</li>
<li>capital investment            资本投资</li>
<li>sheer(绝对的，透明的) volume      数量巨大  </li>
<li>novel ways                    新的方法</li>
<li>geographically dispersed         地理隔离</li>
<li>【】collectively                    总的来说</li>
<li>cope with                    应付，处理</li>
<li>network with                     结交</li>
<li>land job interviews</li>
<li>inferior quality            低质量</li>
<li>foremost                         最重要的</li>
<li>fall apart                        崩溃</li>
<li>make trade-offs                作出权衡和协调</li>
<li>to reiterate                    重申一遍</li>
<li>mutual trust        互信   mutual 互相的</li>
<li>squander money    挥霍钱 squander oppotunity</li>
<li>self control        自控力</li>
<li>inferiority complex  自卑心理     complex 情结</li>
<li>wealth management    理财（个人）</li>
<li>a small sum of money  一小笔钱</li>
<li>build a bond         建立纽带</li>
<li>pocket money        零花钱</li>
<li>myriad benefits        很多好处。</li>
<li>forster/cultivate/enhance skill 培养技能</li>
<li>deleterious impact    有害影响   deleterious 有毒的，有害的</li>
<li>I strongly assert that.     我坚信（表的啊观点）</li>
<li>from my perspective</li>
<li>financial affairs          财务事务</li>
<li>bad quanlity            质量差</li>
<li>on a weekly basis    </li>
<li>slightly exceeded        稍微超出</li>
<li>liberate sb from         从中解脱</li>
<li>ultimately非常书面，而且有一种终结版的味道。ultimate这个词可以理解为终结，最终，有绝对的意思在里面。eventually主要是指一件事情或人经过了很长的时间或者挫折，终于达成了的感觉。</li>
<li>groundless                 没有根据的 </li>
<li>A compelling example is </li>
<li>A good case in point is </li>
<li>at sb’s disposal(支配)</li>
<li>be inclined（倾向于，倾斜） to do sth          倾向于做某事</li>
<li>intergrate into the collective 合群</li>
<li>boost one’s self-esteem      提高自尊心</li>
<li>share the same interest in </li>
<li>In comtemporary society.   当今社会</li>
<li>necessary / indispensable / imperative  必不可少的</li>
<li>more often than not 时不时</li>
<li>pester 纠缠 sb to do sth</li>
<li>win-win strategy</li>
<li>one-size-fits-all approach 一刀切，万全之法</li>
<li>come into contact with       接触</li>
<li>nurture imagination      培养想象力 [ˈnɜːrtʃər]养育；鼓励；培植</li>
<li>relieve pressure             减轻压力</li>
<li>willpower                意志力</li>
<li>upward mobility            上进心</li>
<li>Gain a sense of accomplishment    获得满足感</li>
<li>boost confidence</li>
<li>time consuming            消耗时间</li>
<li>Oversized budget burdens me</li>
<li>overconsumption            过度消费</li>
<li>as dry as a chip             枯燥乏味</li>
<li>stay still                呆着不动</li>
<li>chemical substances            化学物质</li>
<li>make profits               （商业上的）盈利</li>
<li>satisfy curiosity about sth        满足对于sth的好奇心</li>
<li>Promote technological innovation    推动科技创新</li>
<li>can be achieved by doing sth        可以通过sth实现</li>
<li>rebewable/alternative/clean energy</li>
<li>It is generally believed that // it is universally konwn that </li>
<li>cause devastation to                 对什么造成毁灭</li>
<li>have encounter sb/sth            </li>
<li>government obligations             政府义务</li>
<li>build infrastructure / educational equity </li>
<li>advance medical facilities / establish a comprehensive medical system</li>
<li>accelerate economic development（经济发展） / bring considerable economic benefits (经济效益)    </li>
<li>The statistics/ A research（show evidence/dilemma）/ indicate that 数据表明</li>
<li>according to a survey </li>
<li>boost crop productivity</li>
<li>let out steam     释放压力</li>
<li>努力 strive for /endeavor</li>
<li>pose great threat to people’s health</li>
<li>bone ring     动物骨头上的， 和树的年轮差不多</li>
<li>as time goes by 随着时间流逝</li>
<li>gain share 获得市场份额</li>
<li>plausible explanation 貌似可信的解释</li>
<li>seize the moment 把握当下             //carpe diem 及时行乐</li>
<li>damage / detrimental to</li>
<li>cultivate critical / logic thinking</li>
<li>it is nonsense to do sth</li>
<li>resolution determination 决心 </li>
<li>is insufficient to explain all the data</li>
</ol>
<h2 id="sentences"><a href="#sentences" class="headerlink" title="sentences"></a>sentences</h2><ol>
<li><font color="#00ffff">Had I not developed</font> close relationships with my peers, <font color="#00ffff">I would </font>not be happy with my career today.</li>
<li>The science of complexity calls this emergent behavior: The behavior of the whole is greater than the sum of its parts. </li>
<li>Notwithstanding these differences, however, both of these structures are undeniably cells.</li>
<li>At the same time, this process helps developers master the problem domain, enabling them to ask better questions that illuminate the dark corners of a system’s desired behavior.</li>
<li>A complex system designed from scratch never works and cannot be patched up to make it work.</li>
<li>What is important about the object model is that these elements are brought together in a synergistic way.</li>
<li>As we look back on the relatively brief yet colorful history of software engineering, we cannot help but notice two sweeping trends:</li>
<li>There is one insidious(阴险的,潜伏的) problem with the traditional method</li>
<li>To address the aforementioned problem, doing would be an effective solution.</li>
<li>At night, danger lurks in these streets. </li>
<li>we encounter stresses of one kind or other everyday</li>
<li>The benefits of conservation are both financial and aesthetic. 保护自然环境在经济上和美化环境上都有好处。</li>
<li>Her cooking was always good, but this time she had surpassed herself </li>
<li>1.所以我想的是，如果注定要失败，那我们到底为什么现在还要做这些事情？</li>
</ol>
<p>So what I’m thinking is if the failure is inevitable, why on earth aren’t we do these things now?</p>
<h2 id="pedagogy"><a href="#pedagogy" class="headerlink" title="pedagogy"></a>pedagogy</h2><ol>
<li>写分论点 从：知识、技能</li>
</ol>
<h2 id="personal-life"><a href="#personal-life" class="headerlink" title="personal life"></a>personal life</h2><p>1.</p>
<h2 id="template"><a href="#template" class="headerlink" title="template"></a>template</h2><p>开头段 模版</p>
<ol>
<li>The lecture casts doubt and questions on the theories presented in the reading passage regarding (问题)</li>
<li>The passage focus on(). However, in the lecture, the professor respectively points out the flaws with each theory or adduces contradictory evidence in all her assertions.</li>
<li>The reading and listening materials have conflicting opinions about(). The speaker completely refutes the theory in the reading that().</li>
</ol>
<p>分述模版<br>To start with, the lecturer argues that the passage jumps to the conclusion that().He proposed a evidence that(). </p>
<p>Further more, the reading assert that().This assertion is alse contradicted by the speaker.He rebut that().</p>
<p>Finally, the speaker rejects the claim in the reading that().He cite an compelling instance that().</p>
<p>Initially, whereas(鉴于) one theory in the reading indicates(), the lecturer raises serious doubt about. she believes().</p>
<p>Second, while the author insist that(), the lecturer sees otherwise:().She offers a piece of evidence that().</p>
<p>Last, the professor clearly identifies the flaws in the last theory presented in the reading that(), She asserts ().</p>
<p>漏斗状开头</p>
<p>小点</p>
<ol>
<li>the phenomenon that </li>
<li>However, I contend that giving some money to children as a reward is a good choice, a choice that its merits weigh out its drawbacks.<br><font color="#00ffff">类成员只要用char*,char[]就得new，char[10],string可以直接用，自动new了ok</font><br>如何举例：<a href="https://wenku.baidu.com/view/14594d470912a216147929b3.html" target="_blank" rel="noopener">https://wenku.baidu.com/view/14594d470912a216147929b3.html</a></li>
</ol>
<h1 id="口语"><a href="#口语" class="headerlink" title="口语"></a>口语</h1><h2 id="独立口语"><a href="#独立口语" class="headerlink" title="独立口语"></a>独立口语</h2><ol>
<li>积累素材，就是指那些口语的combo</li>
<li>避免空洞说理，用personal exp</li>
<li>积累通用点</li>
<li>小心！！！三单和时态</li>
<li>这个可以踩另一方</li>
</ol>
<p>科技类万能点</p>
<ol>
<li><p>relax ： as a stu ,tight schedule, overwhelmed, refresh mind</p>
</li>
<li><p>convenient: study resources, research materias</p>
</li>
<li><p>addicted : wont pay attention to class</p>
</li>
<li><p>do harm to/impair/ detrimental. eye  and nervous sys</p>
</li>
</ol>
<p>T3</p>
<ol>
<li>reading 1 2句话 ， 主要把change讲清楚</li>
<li>listening 抓关键词和意思，不用太记笔记</li>
</ol>
<h2 id="综合口语"><a href="#综合口语" class="headerlink" title="综合口语"></a>综合口语</h2><ol>
<li>听力听的时候先记录下来，笔记记得工整·离散一点，能往中间加一点逻辑连接词，并且标上序号！！！同时，记的时候就按逻辑留空档</li>
<li>策略/现象/··· -&gt; in order to （好处）/ that (解释)···（and thus）（有的时候要加，有逻辑连缀）-&gt; for example :(This XX is often ···)（在哪些地方发生）-&gt;具体例子-&gt;and （补充）</li>
<li>尽量 动词+名词， 不然只有名词想不到该怎么说</li>
<li>一定要讲 first second 信号词</li>
<li>听为主，记录为辅</li>
<li>不要列举太多细节，没有必要，反而会让自己的逻辑不清楚或者说不完，提供！！！信号词！！！是关键混分，而不是累赘</li>
<li>注意时态， 实验之类的用过去式， 生物现象用现在时</li>
</ol>
<p>举例</p>
<ol>
<li>there is no better illustration of the idea</li>
</ol>
]]></content>
      <categories>
        <category>eg</category>
      </categories>
      <tags>
        <tag>eg</tag>
      </tags>
  </entry>
  <entry>
    <title>python &amp; regular expression</title>
    <url>/2019/11/22/python%20&amp;%20regular%20expression/</url>
    <content><![CDATA[<h2 id="some-details…"><a href="#some-details…" class="headerlink" title="some details…"></a>some details…</h2><p><a href="https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/12.字符串和正则表达式.md" target="_blank" rel="noopener">https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/12.字符串和正则表达式.md</a></p>
<p>the book automate the boring stuff with python</p>
<h2 id="test"><a href="#test" class="headerlink" title="test"></a>test</h2><p>1  sth about findall, it would match in ‘chunks’</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">phoneRegex = re.compile(r&apos;\d\d\d&apos;)   #use re.VERBOSE to add comment（注释）</span><br><span class="line">mo=phoneRegex.findall(&apos;sadadajdadn556666dfdifo&apos;)</span><br><span class="line">print(mo)#[&apos;556&apos;, &apos;666&apos;] # not 556 566 666 666</span><br></pre></td></tr></table></figure>

<p>2  use () to slice a part</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line"></span><br><span class="line">phoneRegex = re.compile(r&apos;(\d\d)\d&apos;)   #use re.VERBOSE to add comment（注释）</span><br><span class="line">mo=phoneRegex.findall(&apos;sadadajdadn123456dfdifo&apos;)</span><br><span class="line">print(mo)#[&apos;12&apos;, &apos;45&apos;]</span><br></pre></td></tr></table></figure>

<p>3.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line"></span><br><span class="line">phoneRegex = re.compile(r&apos;&apos;&apos;(  #r means that we don&apos;t need extra /</span><br><span class="line">        ^https://pan.baidu.com/s/   #start with it</span><br><span class="line">        (.*)                        #match any</span><br><span class="line">        )&apos;&apos;&apos;, re.VERBOSE)   #use re.VERBOSE to add comment（注释）</span><br><span class="line">mo=phoneRegex.findall(&apos;https://pan.baidu.com/s/11onObcEP10PLVHD9yKFT3A#list/path=%2F&apos;)</span><br><span class="line">print(mo)</span><br><span class="line"></span><br><span class="line"># [(&apos;https://pan.baidu.com/s/11onObcEP10PLVHD9yKFT3A#list/path=%2F&apos;, &apos;11onObcEP10PLVHD9yKFT3A#list/path=%2F&apos;)]</span><br></pre></td></tr></table></figure>


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line"></span><br><span class="line">phoneRegex = re.compile(r&apos;&apos;&apos;  #r means that we don&apos;t need extra /</span><br><span class="line">        ^https://pan.baidu.com/s/   #start with it</span><br><span class="line">        (.*)                        #match any</span><br><span class="line">        &apos;&apos;&apos;, re.VERBOSE)   #use re.VERBOSE to add comment（注释）</span><br><span class="line">mo=phoneRegex.findall(&apos;https://pan.baidu.com/s/11onObcEP10PLVHD9yKFT3A#list/path=%2F&apos;)</span><br><span class="line">print(mo)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>regex</tag>
      </tags>
  </entry>
</search>
